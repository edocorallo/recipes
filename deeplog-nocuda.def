BootStrap: docker
From: ubuntu:18.04

%post
     	mkdir /container
        cd /container
        mkdir logfiles
        apt-get -y update
        apt-get -y upgrade
        apt-get -y install software-properties-common
        add-apt-repository ppa:deadsnakes/ppa
        apt-get -y update
        apt-get -y install python3.6
        apt-get -y install python3-pip
        apt-get -y install git
        apt-get -y update
        apt-get -y upgrade
        git clone https://github.com/edocorallounibo/DeepLog_no_tensorboard.git
        pip3 install -r DeepLog_no_tensorboard/requirements.txt
        mkdir DeepLog_no_tensorboard/model
        git clone https://github.com/edocorallounibo/drain3.git
	pip3 install -r drain3/requirements.txt
        cd drain3
	python3 setup.py install
        git clone https://github.com/edocorallounibo/parser.git
	mkdir parser/results
	mkdir parser/results/frontend-server
	mkdir parser/results/backend-server
        pip3 install pandas
        pip3 install scipy


%runscript #WIP:log_to_dataframe TBD
#!/bin/bash  
if ! [ -v $3 ]; then
	if [ $1 == parse ]; then
		cd /container/drain3/parser
#Parsing part
	  	if [[ $2 == frontend ]]; then       
	  		file="/container/logfiles/frontend-server/"
	  		file="${file}$3"
	  		if [[ $file =~ \.gz$ ]];then echo "Decompressing $file ..."; gunzip $file;file=${file//'.gz'}
	  			f=${file//'/container/logfiles/frontend-server/'}
	  			if ! test -e "results/frontend-server/"$f"_struct.csv"; then
	     				echo "Processing $3 ..."
					python3 log_to_dataframe.py -f $f
	     				python3 drain3_parser.py -f $f
	    			else
	    				echo "$3 seems to be already parsed, if it's a new file to be parsed, please name it differently"
	  			fi
				echo "Compressing $file ..."; gzip $file;
			else	 
				f=${file//'/container/logfiles/frontend-server/'}
	  			if ! test -e "results/frontend-server/"$f"_struct.csv"; then
	     				echo "Processing $3 ..."
					python3 log_to_dataframe.py -f $f
	     				python3 drain3_parser.py -f $f
	    			else
	    				echo "$3 seems to be already parsed, if it's a new file to be parsed, please name it differently"
	  			fi
			fi
	   		if ! test -e "results/frontend-server/"$3"_normal"; then
				echo "Sequences for $3"
	    			#python3 drain_sequences.py -f $3
	   		else
	    			echo "$3 has already been converted to sequences, if it's a new file to be converted, please name it differently"
	   		fi
 	  	elif [[ $2 == backend ]]; then
	  		file="/container/logfiles/backend-server/"
	  		file="${file}$3"
	  		if [[ $file =~ \.gz$ ]];then echo "Decompressing $file ..."; gunzip $file;file=${file//'.gz'}
	  			f=${file//'/container/logfiles/backend/'}
	  			if ! test -e "results/backend-server/"$f"_struct.csv"; then
					echo "Processing $f ..."	     			
					python3 log_to_dataframe.py -b $f
	     				python3 drain3_parser.py -b $f
				else 
					echo "$3 seems to be already parsed, if it's a new file to be parsed, please name it differently"
				fi
	     			echo "Compressing $file ..."; gzip $file
			else 
				f=${file//'/container/logfiles/backend/'}
	  			if ! test -e "results/backend-server/"$f"_struct.csv"; then
					echo "Processing $f ..."	     			
					python3 log_to_dataframe.py -b $f
	     				python3 drain3_parser.py -b $f
				else 
					echo "$3 seems to be already parsed, if it's a new file to be parsed, please name it differently"
				fi
	  		fi	   
	   		if ! test -e "results/frontend-server/"$3"_normal"; then
				echo "Sequences for $3"	    			
				python3 drain_sequences.py -b $3
	   		else
	    			echo "$3 has already been converted to sequences, if it's a new file to be converted, please name it differently"
	   		fi
	  	else 
	   		echo "when parsing is necessary to specify frontend or backend"
	  	fi
	 fi
else #if [ -v $3 ]
	 if [[ $1 == parse ]]; then
	 	cd /container/drain3/parser
#Parsing part 
	  	if [[ $2 == frontend ]]; then
	   		for file in /container/logfiles/frontend-server/*
	   		do                                                                         #Clustering
	   			if [[ $file =~ \.gz$ ]];then echo "Decompressing $file ..."; gunzip $file;file=${file//'.gz'}
	    				f=${file//"/container/logfiles/frontend-server/"}    
	    				if ! test -e "results/frontend-server/"$f"_struct.csv" ;then
	     					echo "Processing $f..."
	     					python3 log_to_dataframe.py -f $f
	     					python3 drain3_parser.py -f $f
	    				else
	     					echo "$file seems to be already parsed, if it's a new file to be parsed, please name it differently"
	    				fi
	    			echo "Compressing $file ..."; gzip $file;
				else 
					f=${file//"/container/logfiles/frontend-server/"}    
	    				if ! test -e "results/frontend-server/"$f"_struct.csv" ;then
	     					echo "Processing $f..."
	     					python3 log_to_dataframe.py -f $f
	     					python3 drain3_parser.py -f $f
	    				else
	     					echo "$file seems to be already parsed, if it's a new file to be parsed, please name it differently"
	    				fi
				fi
	   		done
	   		for file in /container/results/frontend-server/*
	   		do      
				if [[ $file =~ _struct\.csv$ ]]; then                                                                    #extract sequences
		    			f=${file//'_struct.csv'}
		    			f=${f//'results/frontend-server/'}
		    			if ! test -e "results/frontend-server/"$f"_normal" ;then
						echo "Sequences for $f"
		     				python3 drain_sequences.py -f $f
		    			else
		     				echo "$file seems to be already processed, if it's a new file to be converted in sequences, please name it differently"
		    			fi	
				fi
	   		done	
	  	elif [[ $2 == backend ]]; then
	   		for file in /container/logfiles/backend-server/*
	   		do                                                                            #clustering	    			
				if [[ $file =~ \.gz$ ]];then echo "Decompressing $file ..."; gunzip $file;file=${file//'.gz'}
	    				f=${file//'/container/logfiles/backend-server/'}
	    				if ! test -e "results/backend-server/"$f"_struct.csv";then
	     					echo "Processing $f ..."
	     					python3 log_to_dataframe.py -b $f
	     					python3 drain3_parser.py -b $f
	    				else 
	     					echo "$file seems to be already parsed, if it's a new file to be parsed, please name it differently"
	    				fi
	   				echo "Compressing $file ..."; gzip $file
				else 
					f=${file//'/container/logfiles/backend-server/'}
	    					if ! test -e "results/backend-server/"$f"_struct.csv";then
	     						echo "Processing $f ..."
	     						python3 log_to_dataframe.py -b $f
	     						python3 drain3_parser.py -b $f
	    					else 
	     						echo "$file seems to be already parsed, if it's a new file to be parsed, please name it differently"
	    					fi
				fi
	   		done
	   		for file in /container/results/backend-server/*
	   		do #extract sequences
				if [[ $file =~ _struct\.csv$ ]]; then
	    				f=${file//'_struct.csv'}
	    				f=${f//'results/backend-server/'}
	    				if ! test -e "results/backend-server/"$f"_normal";then
						echo "Sequences for $f"	    				
						python3 drain_sequences.py -b $f
	    				else
	     					echo "$file seems to be already processed, if it's a new file to be converted in sequences, please name it differently"
	    				fi
				fi
	   		done
	  	else
	   		echo "Specify frontend or backend for log format"
	  	fi #if $2=="-f"
	 elif [[ $1 == train ]]; then									#DeepLog training stage										
	 	cd /container/DeepLog_no_tensorboard/
	  	echo "Training stage..."
	 	if [[$2 == frontend]]; then
	  		python3 LogKeyModel_train.py  -log_file storm-frontend	
	  	elif [[ $2 == backend ]];then
	  		python3 LogKeyModel_train.py -b -log_file storm-backend
	  	fi
	 elif [[ $1 == predict ]]; then
	 	cd /container/DeepLog_no_tensorboard/
	  	echo "Predicting..."	
	 	if [[$2 == frontend]]; then			
	  		python3 LogKeyModel_predict.py -f -log_file storm-frontend
		elif [[$2 == backend]]; then
	  		python3 LogKeyModel_predict.py -b -log_file storm-backend
		else 
			echo "Specify frontend or backend log format"
		fi
	else
	  	echo "Specify the task: parse, train, predict are the available options"
	fi
fi
%help
	A container for unprivileged users, build it with the --fakeroot (or -f) option.
	In order to be functional the "/container/logfile/" and "/container/DeepLog_no_tensorboard/data/" should be bound
	via the --bind (or -B) option to your host system.
	
	Runs Spell algorithm to parse a log_file into sequences, then runs the LogKey model from DeepLog.
	For references see: LogPai (https://github.com/logpai/logparser)
			    DeepLog(https://github.com/wuyifan18/DeepLog)
			    
	One day the parameter model will be implemented, this will increase the overall accuracy.

	Usage:
		1st argument:
				parse | train | predict 
		2nd argument:
				frontend | backend
		3rd argument:
				(optional) file_name

%labels
       	Author edocorallounibo
	Version 0.2.0-a
